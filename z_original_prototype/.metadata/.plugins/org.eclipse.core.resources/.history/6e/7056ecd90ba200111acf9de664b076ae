package assassins.ui.prototypes;

import java.util.Calendar;
import java.util.List;

import android.content.Context;
import android.location.Location;
import android.location.LocationManager;
import android.location.LocationProvider;
import android.text.format.Time;
import android.util.Log;

import com.google.android.maps.GeoPoint;

public class PlayerLocation {

		PlayerLocation()
		{
			
		}
		
		public static GeoPoint getMyLocationAsGeoPoint(Context context) 
		{	
			Log.d("Project Assassins", "entering getMyLocationAsGeoPoint()");
			
			Location l = PlayerLocation.getMyLocation(context);
			
			Log.d("Project Assassins", "my location in degrees: "+ l.getLatitude() +" "+ l.getLongitude());
			return PlayerLocation.locationToGeoPoint(l);
		}
		
		public static Location getMyLocation(Context context)
		{
			Log.d("Project Assassins", "entering getMyLocation()");
			
			LocationManager lm = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);
			
			List<String> providers = lm.getProviders(false);
			
			for(String provider : providers)
			{
				Location location = lm.getLastKnownLocation(provider);
				
				Log.d("ProjectAssassins", "Provider: "+provider);
				
				if(location != null)
				{
					float accuracy = location.getAccuracy();
					long locationTime = location.getTime();

					Time t = new Time();
					t.setToNow();
					long currTime = t.toMillis(true);
					
					
					Log.d("ProjectAssassins", "   Accuracy: "+accuracy +"meters, Age: "+(currTime-locationTime)/1000 +" secs");
				}
			}
			
			locationManager.
			
			if(loc == null)
			{
				Log.d("Project Assassins", "getMyLocation() -> loc is null");
			
				loc = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
				
				Log.d("Project Assassins", "attempted GPS_PROVIDER... results: "+loc);
			}
			else
				Log.d("Project Assassins", "last known :"+loc.toString());
			return loc;
		}
		
		public static GeoPoint locationToGeoPoint(Location loc)
		{	
			int lat = degreesToMicroDegrees(loc.getLatitude());
			int lon = degreesToMicroDegrees(loc.getLongitude());
			
			return new GeoPoint(lat, lon);		
		}
		
		public static Location geoPointToLocation(GeoPoint geo)
		{	
			double lat = microDegreesToDegrees(geo.getLatitudeE6());
			double lon = microDegreesToDegrees(geo.getLongitudeE6());
			
			Location loc = new Location(LocationManager.PASSIVE_PROVIDER);
			loc.setLatitude(lat);
			loc.setLongitude(lon);
			
			return loc;		
		}
		
		
		
		public static float getMetersBetween(GeoPoint me, GeoPoint them)
		{
			if(me == null || them == null)
			{
				return -1;
			}
			
			Location myLoc = geoPointToLocation(me);
			Location theirLoc = geoPointToLocation(them);
			
			float dist = myLoc.distanceTo(theirLoc);
			
			return dist;
		}
		
		public static float getBearingTo(GeoPoint me, GeoPoint them)
		{
			if(me == null || them == null)
			{
				return -1;
			}
			
			Location myLoc = geoPointToLocation(me);
			Location theirLoc = geoPointToLocation(them);
			
			float bearingToThem = myLoc.bearingTo(theirLoc);
			
			return bearingToThem;
		}
		
		public static int degreesToMicroDegrees(double degrees) {
		    return (int)(degrees*1E6);
		}
		
		public static double microDegreesToDegrees(int microDegrees) {
		    return microDegrees / 1E6;
		}
}
