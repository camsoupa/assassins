package assassins.ui.prototypes;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;

import android.content.Context;
import android.util.Log;

import com.google.gson.Gson;

import org.apache.http.HttpResponse;
import org.apache.http.client.*;
import org.apache.http.client.methods.*;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.HttpParams;


public class AssassinsHTTPClient {

	private String serviceURL;
	
	public AssassinsHTTPClient(String url) {
		
		serviceURL = url;
	}
	
	public void authenticatePlayer(Context c) throws AssassinsHttpException {
		
		String installId = Installation.id(c);
		//send installId to service to see if this device has a profile
		get("/protected/authenticate/", installId);
	}
	
	public void importProfile(String phoneId) throws AssassinsHttpException {
		//UNIMPLEMENTED
	}
	
	public void createProfile(Player p) throws AssassinsHttpException {
		
		Gson g = new Gson();
		String jsonPlayer = g.toJson(p);
		post("/protected/profile", jsonPlayer);
	}
	
	public void createMatch(Conspiracy c) throws AssassinsHttpException {
		
		Gson g = new Gson();
		String jsonMatch = g.toJson(c);
		post("/protected/match", jsonMatch);
	}
	
	public void getMatchesNearPlayer(Player p) throws AssassinsHttpException {
		
		
	}
	
	private void post(String route, String json) throws AssassinsHttpException {
		 
		// Create a new HttpClient and Post Header
	    HttpClient httpclient = new DefaultHttpClient();
	    HttpResponse response = null;
	    
	    Log.d("Project Assassins", serviceURL+route);
	    HttpPost httppost= new HttpPost(serviceURL+route);
	    
	    try {
	        // Add data
	        httppost.setEntity(new StringEntity(json));
	        Log.d("Project Assassins", httppost.toString());
	        // Execute HTTP Put Request
	        response = httpclient.execute(httppost);
	        
	        if(response.getStatusLine().getStatusCode() != 200) {
	        	String reasonPhrase = response.getStatusLine().getReasonPhrase();
	        	throw new AssassinsHttpException(reasonPhrase);
	        }
	    } 
	    catch (ClientProtocolException e) {
	    	throw new AssassinsHttpException("ClientProtocolException", e);
	    } 
	    catch (IOException e) {
	    	throw new AssassinsHttpException("IO Exception", e);
	    }
	    catch (Exception e) {
	    	throw new AssassinsHttpException("Unknown Exception", e);
	    }
	}
	
	private String get(String route, String params) throws AssassinsHttpException {
		 
		// Create a new HttpClient and Post Header
	    HttpClient httpclient = new DefaultHttpClient();
	    HttpResponse response;
	    
	    BufferedReader in = null;
	    
	    Log.d("Project Assassins", "HTTP GET: "+serviceURL+route+params);
	    HttpGet httpget= new HttpGet(serviceURL+route+params);
	    
	    try {
	        // Add data

	        Log.d("Project Assassins", httpget.toString());
	        // Execute HTTP Put Request
	        response = httpclient.execute(httpget);
	        
	        if(response.getStatusLine().getStatusCode() != 200){
	        	String reasonPhrase = response.getStatusLine().getReasonPhrase();
	        	throw new AssassinsHttpException(reasonPhrase);
	        }
	        else{
	    	    
				 in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
				 StringBuffer sb = new StringBuffer("");
				 String line = "";
				 String NL = System.getProperty("line.separator");
				 
				 while ((line = in.readLine()) != null) {
				     sb.append(line + NL);
				 }
				 
				 in.close();
				 String content = sb.toString();
				 return content;
             } 

	    } 
	    catch (ClientProtocolException e) {
	    	throw new AssassinsHttpException("ClientProtocolException", e);
	    } 
	    catch (IOException e) {
	    	throw new AssassinsHttpException("IO Exception", e);
	    }
	    catch (Exception e) {
	    	throw new AssassinsHttpException("Unknown Exception", e);
	    }
	    finally {
            if (in != null) {
                try {
                    in.close();
                } 
                catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
	}
	
	
	

}
